{{> partials.copyHeader }}

package okta

{{#if (or (eq model.modelName "UserProfile") (eq model.modelName "SmsTemplateTranslations"))}}
type {{model.modelName}} map[string]interface{}
{{else}}
{{> model.imports this}}

{{#if (eq model.modelName "Application")}}
type App interface {
	IsApplicationInstance() bool
}

{{/if}}

{{#if (eq model.modelName "UserFactor")}}
type Factor interface {
	IsUserFactorInstance() bool
}

{{/if}}
{{#if (eq model.modelName "GroupSchema")}}
type {{model.modelName}}Resource resource

{{/if}}
{{#if (and
    (or
      (or (gt model.methods.length 0)
          (gt model.crud.length 0))
      (or
          (eq model.modelName "LogEvent")
          (or (eq model.modelName "Domain") (eq model.modelName "UserSchema")))
    )
    (ne model.modelName "Role")
)}}
type {{model.modelName}}Resource resource

{{/if}}
{{#if (eq model.modelName "GroupProfile")}}
type {{model.modelName}}Map map[string]interface{}

{{/if}}
{{#if (eq model.modelName "ApplicationSettingsApplication")}}
type {{model.modelName}} map[string]interface{}
{{else if model.enum}}
type {{model.modelName}} string
{{else}}
type {{model.modelName}} struct {
	{{{buildModelProperties model}}}
{{#if (eq model.modelName "GroupProfile")}}
    {{model.modelName}}Map
{{/if}}
}
{{/if}}
{{#if model.enum}}
{{else}}
{{#if (isInstance model) }}
func New{{model.modelName}}() *{{model.modelName}} {
	return &{{model.modelName}}{
		{{#each model.properties as |prop|}}
		{{#if (ne prop.default undefined) }}
		{{structProp prop.propertyName}}: "{{prop.default}}",
		{{/if}}
		{{/each}}
		{{#if (ne model.resolution undefined) }}
		{{structProp model.resolution.fieldName}}: "{{model.resolution.fieldValue}}",
		{{/if}}
	}
}

func (a *{{model.modelName}}) Is{{model.tags.[0]}}Instance() bool {
	return true
}

{{/if}}
{{/if}}
{{#each operations as |operation|}}
{{> model.defaultMethod  operation=operation alias=alias modelName=../model.modelName}}
{{/each}}
{{/if}}

{{#if (eq model.modelName "GroupProfile")}}
func (a *{{model.modelName}}) UnmarshalJSON(data []byte) error {
	if string(data) == "null" || string(data) == `""` {
		return nil
	}
	var profile map[string]interface{}
	err := json.Unmarshal(data, &profile)
	if err != nil {
		return err
	}
	a.Name, _ = profile["name"].(string)
	a.Description, _ = profile["description"].(string)
	delete(profile, "name")
	delete(profile, "description")
	a.{{model.modelName}}Map = profile
	return nil
}

func (a {{model.modelName}}) MarshalJSON() ([]byte, error) {
	if len(a.{{model.modelName}}Map) == 0 {
		return  json.Marshal(&struct {
			Name        string `json:"name"`
			Description string `json:"description"`
		}{
			Name:        a.Name,
			Description: a.Description,
		})
	}
	if a.Name != "" {
		a.{{model.modelName}}Map["name"] = a.Name
	}
	if a.Description != "" {
		a.{{model.modelName}}Map["description"] = a.Description
	}
	return json.Marshal(a.{{model.modelName}}Map)
}

{{/if}}